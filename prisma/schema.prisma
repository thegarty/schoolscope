generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                String   @id @default(cuid())
  acara_id          String   @unique
  name              String
  suburb            String
  state             String
  postcode          String
  type              String
  sector            String
  status            String
  geolocation       String?
  parent_school_id  String?
  age_id            String?
  latitude          Float
  longitude         Float
  state_province_id String?
  website           String?
  phone             String?
  email             String?
  principalName     String?
  address           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  children          Child[]
  events            Event[]
  schoolEdits       SchoolEdit[]

  @@map("schools")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  isAdmin   Boolean   @default(false)
  emailVerified Boolean @default(false)
  emailSubscribed Boolean @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  children  Child[]
  events    Event[]
  sessions  Session[]
  eventConfirmations EventConfirmation[]
  schoolEdits       SchoolEdit[]
  schoolEditVotes   SchoolEditVote[]
  emailEvents EmailEvent[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Child {
  id        String   @id @default(cuid())
  name      String
  yearLevel String
  userId    String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School   @relation(fields: [schoolId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  privateEvents Event[] @relation("ChildPrivateEvents")

  @@map("children")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  yearLevels  String[]
  category    String
  confirmed   Boolean  @default(false)
  isPrivate   Boolean  @default(false)
  location    String?
  childId     String?
  schoolId    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  school      School   @relation(fields: [schoolId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  child       Child?   @relation("ChildPrivateEvents", fields: [childId], references: [id])
  confirmations EventConfirmation[]

  @@map("events")
}

model EventConfirmation {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_confirmations")
}

model SchoolEdit {
  id            String   @id @default(cuid())
  schoolId      String
  field         String
  oldValue      String?
  newValue      String
  reason        String?
  status        SchoolEditStatus @default(PENDING)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  school        School   @relation(fields: [schoolId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  votes         SchoolEditVote[]

  @@map("school_edits")
}

model SchoolEditVote {
  id           String   @id @default(cuid())
  schoolEditId String
  userId       String
  vote         VoteType
  createdAt    DateTime @default(now())
  schoolEdit   SchoolEdit @relation(fields: [schoolEditId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([schoolEditId, userId])
  @@map("school_edit_votes")
}

enum SchoolEditStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoteType {
  APPROVE
  REJECT
}

model EmailEvent {
  id          String   @id @default(cuid())
  userId      String?
  email       String
  messageId   String   @unique
  eventType   EmailEventType
  timestamp   DateTime
  reason      String?
  bounceType  String?
  subType     String?
  destination String?
  source      String?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@map("email_events")
}

enum EmailEventType {
  SEND
  DELIVERY
  BOUNCE
  COMPLAINT
  REJECT
}
